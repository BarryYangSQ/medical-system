{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u9648\\u4E91\\u6797\\\\Desktop\\\\health\\\\health-project\\\\frontend\\\\src\\\\screens\\\\PreAppointmentScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PreAppointmentScren = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // 获取路由参数中的 id\n  const location = useLocation(); // 获取当前的 location 对象\n  const [appointmentDate, setAppointmentDate] = useState('');\n  const [appointmentSlot, setAppointmentSlot] = useState('');\n  useEffect(() => {\n    // 解析查询字符串参数\n    const queryParams = new URLSearchParams(location.search);\n    const date = queryParams.get('date');\n    const slot = queryParams.get('slot');\n\n    // 如果URL中包含日期和时间段，则设置状态\n    if (date && slot) {\n      setAppointmentDate(date);\n      setAppointmentSlot(slot);\n    }\n\n    // 此处可能还有其他需要在组件加载时执行的逻辑\n  }, [location.search]); // 依赖项是 location.search，这样任何查询字符串的变化都会触发这个 effect\n\n  // ... 使用 appointmentDate 和 appointmentSlot 来渲染组件\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Appointment ID: \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Date: \", appointmentDate]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Slot: \", appointmentSlot]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(PreAppointmentScren, \"+rGzSuuV7nSKX4eWxpD+lLYPFO0=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = PreAppointmentScren;\nexport default PreAppointmentScren;\nvar _c;\n$RefreshReg$(_c, \"PreAppointmentScren\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useLocation","jsxDEV","_jsxDEV","PreAppointmentScren","_s","id","location","appointmentDate","setAppointmentDate","appointmentSlot","setAppointmentSlot","queryParams","URLSearchParams","search","date","get","slot","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/陈云林/Desktop/health/health-project/frontend/src/screens/PreAppointmentScreen.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useParams, useLocation } from 'react-router-dom'\r\n\r\nconst PreAppointmentScren = () => {\r\n  const { id } = useParams() // 获取路由参数中的 id\r\n  const location = useLocation() // 获取当前的 location 对象\r\n  const [appointmentDate, setAppointmentDate] = useState('')\r\n  const [appointmentSlot, setAppointmentSlot] = useState('')\r\n\r\n  useEffect(() => {\r\n    // 解析查询字符串参数\r\n    const queryParams = new URLSearchParams(location.search)\r\n    const date = queryParams.get('date')\r\n    const slot = queryParams.get('slot')\r\n\r\n    // 如果URL中包含日期和时间段，则设置状态\r\n    if (date && slot) {\r\n      setAppointmentDate(date)\r\n      setAppointmentSlot(slot)\r\n    }\r\n\r\n    // 此处可能还有其他需要在组件加载时执行的逻辑\r\n  }, [location.search]) // 依赖项是 location.search，这样任何查询字符串的变化都会触发这个 effect\r\n\r\n  // ... 使用 appointmentDate 和 appointmentSlot 来渲染组件\r\n\r\n  return (\r\n    <div>\r\n      {/* 渲染预约信息 */}\r\n      <h1>Appointment ID: {id}</h1>\r\n      <p>Date: {appointmentDate}</p>\r\n      <p>Slot: {appointmentSlot}</p>\r\n\r\n      {/* 其他 UI 元素 */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PreAppointmentScren\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM;IAAEC;EAAG,CAAC,GAAGN,SAAS,CAAC,CAAC,EAAC;EAC3B,MAAMO,QAAQ,GAAGN,WAAW,CAAC,CAAC,EAAC;EAC/B,MAAM,CAACO,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAE1DD,SAAS,CAAC,MAAM;IACd;IACA,MAAMc,WAAW,GAAG,IAAIC,eAAe,CAACN,QAAQ,CAACO,MAAM,CAAC;IACxD,MAAMC,IAAI,GAAGH,WAAW,CAACI,GAAG,CAAC,MAAM,CAAC;IACpC,MAAMC,IAAI,GAAGL,WAAW,CAACI,GAAG,CAAC,MAAM,CAAC;;IAEpC;IACA,IAAID,IAAI,IAAIE,IAAI,EAAE;MAChBR,kBAAkB,CAACM,IAAI,CAAC;MACxBJ,kBAAkB,CAACM,IAAI,CAAC;IAC1B;;IAEA;EACF,CAAC,EAAE,CAACV,QAAQ,CAACO,MAAM,CAAC,CAAC,EAAC;;EAEtB;;EAEA,oBACEX,OAAA;IAAAe,QAAA,gBAEEf,OAAA;MAAAe,QAAA,GAAI,kBAAgB,EAACZ,EAAE;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC7BnB,OAAA;MAAAe,QAAA,GAAG,QAAM,EAACV,eAAe;IAAA;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9BnB,OAAA;MAAAe,QAAA,GAAG,QAAM,EAACR,eAAe;IAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAG3B,CAAC;AAEV,CAAC;AAAAjB,EAAA,CAjCKD,mBAAmB;EAAA,QACRJ,SAAS,EACPC,WAAW;AAAA;AAAAsB,EAAA,GAFxBnB,mBAAmB;AAmCzB,eAAeA,mBAAmB;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}