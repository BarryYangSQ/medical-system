{"ast":null,"code":"import React,{useEffect}from'react';import{useParams,useNavigate}from'react-router-dom';import{useDispatch,useSelector}from'react-redux';import{Row,Col,Card,ListGroup}from'react-bootstrap';import{editOrderById,fetchOrdersByStaffId}from'../actions/staffAction';import Loader from'../components/Loader';import Message from'../components/Message';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const StaOrderListScreen=()=>{const{id:staffId}=useParams();const navigate=useNavigate();const dispatch=useDispatch();const staffOrders=useSelector(state=>state.staffOrders);const{loading,error,orders}=staffOrders;useEffect(()=>{if(staffId){dispatch(fetchOrdersByStaffId(staffId));}},[dispatch,staffId]);const getStatusMessage=status=>{switch(status){case'Scheduled':return{variant:'info',message:'Scheduled'};case'Ready':return{variant:'success',message:'Ready'};case'Cancelled':return{variant:'danger',message:'Cancelled'};case'Transfer':return{variant:'warning',message:'Transfer'};default:return{variant:'secondary',message:'Unknown'};}};const stateToEdit=orderId=>{dispatch(editOrderById(orderId));navigate(\"/staffs/orders/\".concat(orderId,\"/edit\"));};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h1\",{className:\"text-center\",children:[\"Staff Orders for \",staffId]}),loading?/*#__PURE__*/_jsx(Loader,{}):error?/*#__PURE__*/_jsx(Message,{variant:\"danger\",children:error}):/*#__PURE__*/_jsx(Row,{className:\"justify-content-center\",children:/*#__PURE__*/_jsx(Col,{md:10,children:/*#__PURE__*/_jsx(ListGroup,{variant:\"flush\",children:orders.map(order=>/*#__PURE__*/_jsx(ListGroup.Item,{className:\"p-3\",children:/*#__PURE__*/_jsxs(Card,{className:\"mb-3 shadow\",onClick:()=>stateToEdit(order._id),style:{cursor:'pointer'},children:[/*#__PURE__*/_jsxs(Card.Header,{as:\"h4\",className:\"text-center bg-primary text-white\",children:[\"Order ID: \",order._id]}),/*#__PURE__*/_jsx(Card.Body,{children:order.orderItems.length>0?order.orderItems.map((item,index)=>/*#__PURE__*/_jsx(Card,{className:\"mb-2\",children:/*#__PURE__*/_jsx(Card.Body,{children:/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsxs(Col,{md:4,children:[/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsxs(Col,{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"User Name:\"}),\" \",order.user.name]})}),/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsxs(Col,{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Date:\"}),\" \",new Date(item.date).toLocaleDateString()]})}),/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsxs(Col,{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Slot:\"}),\" \",item.slot]})})]}),/*#__PURE__*/_jsxs(Col,{md:5,children:[/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsx(Col,{children:/*#__PURE__*/_jsx(\"strong\",{children:\"Illness Description:\"})})}),/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsx(Col,{children:order.illnessDescription})})]}),/*#__PURE__*/_jsx(Col,{md:3,children:/*#__PURE__*/_jsx(Message,{...getStatusMessage(item.status),children:getStatusMessage(item.status).message})})]})})},index)):/*#__PURE__*/_jsx(Message,{variant:\"info\",children:\"No appointment requests found.\"})})]})},order._id))})})})]});};export default StaOrderListScreen;","map":{"version":3,"names":["React","useEffect","useParams","useNavigate","useDispatch","useSelector","Row","Col","Card","ListGroup","editOrderById","fetchOrdersByStaffId","Loader","Message","jsxs","_jsxs","jsx","_jsx","StaOrderListScreen","id","staffId","navigate","dispatch","staffOrders","state","loading","error","orders","getStatusMessage","status","variant","message","stateToEdit","orderId","concat","children","className","md","map","order","Item","onClick","_id","style","cursor","Header","as","Body","orderItems","length","item","index","user","name","Date","date","toLocaleDateString","slot","illnessDescription"],"sources":["C:/Users/陈云林/Desktop/health/health-project/frontend/src/screens/StaOrderListScreen.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useParams, useNavigate } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col, Card, ListGroup } from 'react-bootstrap'\r\nimport { editOrderById, fetchOrdersByStaffId } from '../actions/staffAction'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\n\r\nconst StaOrderListScreen = () => {\r\n  const { id: staffId } = useParams()\r\n  const navigate = useNavigate()\r\n  const dispatch = useDispatch()\r\n  const staffOrders = useSelector(state => state.staffOrders)\r\n  const { loading, error, orders } = staffOrders\r\n\r\n  useEffect(() => {\r\n    if (staffId) {\r\n      dispatch(fetchOrdersByStaffId(staffId))\r\n    }\r\n  }, [dispatch, staffId])\r\n\r\n  const getStatusMessage = (status) => {\r\n    switch (status) {\r\n      case 'Scheduled':\r\n        return { variant: 'info', message: 'Scheduled' }\r\n      case 'Ready':\r\n        return { variant: 'success', message: 'Ready' }\r\n      case 'Cancelled':\r\n        return { variant: 'danger', message: 'Cancelled' }\r\n      case 'Transfer':\r\n        return { variant: 'warning', message: 'Transfer' }\r\n      default:\r\n        return { variant: 'secondary', message: 'Unknown' }\r\n    }\r\n  }\r\n\r\n  const stateToEdit = (orderId) => {\r\n\r\n    dispatch(editOrderById(orderId))\r\n\r\n    navigate(`/staffs/orders/${orderId}/edit`)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"text-center\">Staff Orders for {staffId}</h1>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant=\"danger\">{error}</Message>\r\n      ) : (\r\n        <Row className=\"justify-content-center\">\r\n          <Col md={10}>\r\n            <ListGroup variant=\"flush\">\r\n              {orders.map(order => (\r\n                <ListGroup.Item key={order._id} className=\"p-3\">\r\n                  <Card className=\"mb-3 shadow\" onClick={() => stateToEdit(order._id)} style={{ cursor: 'pointer' }}>\r\n                    <Card.Header as=\"h4\" className=\"text-center bg-primary text-white\">Order ID: {order._id}</Card.Header>\r\n                    <Card.Body>\r\n                      {order.orderItems.length > 0 ? order.orderItems.map((item, index) => (\r\n                        <Card className=\"mb-2\" key={index}>\r\n                          <Card.Body>\r\n                            <Row>\r\n                              <Col md={4}>\r\n\r\n                                <Row>\r\n                                  <Col><strong>User Name:</strong> {order.user.name}</Col>\r\n                                </Row>\r\n                                <Row>\r\n                                  <Col><strong>Date:</strong> {new Date(item.date).toLocaleDateString()}</Col>\r\n                                </Row>\r\n                                <Row>\r\n                                  <Col><strong>Slot:</strong> {item.slot}</Col>\r\n                                </Row>\r\n                              </Col>\r\n                              <Col md={5}>\r\n                                <Row>\r\n                                  <Col><strong>Illness Description:</strong></Col>\r\n                                </Row>\r\n                                <Row>\r\n                                  <Col>{order.illnessDescription}</Col>\r\n                                </Row>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                <Message {...getStatusMessage(item.status)}>{getStatusMessage(item.status).message}</Message>\r\n                              </Col>\r\n                            </Row>\r\n                          </Card.Body>\r\n                        </Card>\r\n                      )) : (\r\n                        <Message variant=\"info\">No appointment requests found.</Message>\r\n                      )}\r\n                    </Card.Body>\r\n                  </Card>\r\n                </ListGroup.Item>\r\n              ))}\r\n            </ListGroup>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StaOrderListScreen\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}