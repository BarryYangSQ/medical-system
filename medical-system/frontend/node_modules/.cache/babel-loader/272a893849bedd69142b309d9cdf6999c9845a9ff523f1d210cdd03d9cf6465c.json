{"ast":null,"code":"import{ORDER_CREATE_FAIL,ORDER_CREATE_REQUEST,ORDER_CREATE_SUCCESS,ORDER_DETAILS_FAIL,ORDER_DETAILS_REQUEST,ORDER_DETAILS_SUCCESS,ORDER_TRANS_FAIL,ORDER_TRANS_REQUEST,ORDER_TRANS_SUCCESS}from'../contents/orderContent';import axios from'axios';//创建订单  Action\nexport const createOrder=order=>async(dispatch,getState)=>{try{dispatch({type:ORDER_CREATE_REQUEST});// 获取登录成功后的用户信息\nconst{userLogin:{userInfo}}=getState();// 在尝试使用userInfo之前，确保它不是null\nif(!userInfo){throw new Error('用户未登录。');}const config={headers:{'Content-Type':'application/json',Authorization:\"Bearer \".concat(userInfo.token)// 确保在发送请求前userInfo存在\n}};const{data}=await axios.post(\"/api/orders\",order,config);dispatch({type:ORDER_CREATE_SUCCESS,payload:data});}catch(error){const errorMessage=error.response&&error.response.data.message?error.response.data.message:error.message;dispatch({type:ORDER_CREATE_FAIL,payload:errorMessage});}};//获取order   Action\nexport const getOrderDetails=id=>async(dispatch,getState)=>{try{dispatch({type:ORDER_DETAILS_REQUEST});//获取登录成功后的用户信息\nconst{userLogin:{userInfo}}=getState();const config={headers:{Authorization:\"Bearer \".concat(userInfo.token)}};const{data}=await axios.get(\"/api/orders/\".concat(id),config);dispatch({type:ORDER_DETAILS_SUCCESS,payload:data});}catch(error){dispatch({type:ORDER_DETAILS_FAIL,payload:error.response&&error.response.data.message?error.response.data.message:error.message});}};//修改的订单详情\nexport const editOrderDetails=id=>async(dispatch,getState)=>{try{dispatch({type:ORDER_DETAILS_REQUEST});// 获取登录成功后的用户信息\nconst{userLogin:{userInfo}}=getState();// 在尝试使用userInfo之前，确保它不是null\nif(!userInfo){throw new Error('用户未登录。');}const config={headers:{'Content-Type':'application/json',Authorization:\"Bearer \".concat(userInfo.token)// 确保在发送请求前userInfo存在\n}};const{data}=await axios.get(\"/api/orders/\".concat(id),config);dispatch({type:ORDER_DETAILS_SUCCESS,payload:data});}catch(error){dispatch({type:ORDER_DETAILS_FAIL,payload:error.response&&error.response.data.message?error.response.data.message:error.message});}};//医生转诊 创建order\nexport const transOrder=order=>async(dispatch,getState)=>{try{dispatch({type:ORDER_TRANS_REQUEST});// 获取登录成功后的用户信息\nconst{userLogin:{userInfo}}=getState();// 在尝试使用userInfo之前，确保它不是null\nif(!userInfo){throw new Error('用户未登录。');}const config={headers:{'Content-Type':'application/json',Authorization:\"Bearer \".concat(userInfo.token)// 确保在发送请求前userInfo存在\n}};dispatch({type:ORDER_TRANS_REQUEST});const{data}=await axios.post(\"/api/orders/edit\",order,config);dispatch({type:ORDER_TRANS_SUCCESS,payload:data});}catch(error){const errorMessage=error.response&&error.response.data.message?error.response.data.message:error.message;dispatch({type:ORDER_TRANS_FAIL,payload:errorMessage});}};","map":{"version":3,"names":["ORDER_CREATE_FAIL","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_DETAILS_FAIL","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_TRANS_FAIL","ORDER_TRANS_REQUEST","ORDER_TRANS_SUCCESS","axios","createOrder","order","dispatch","getState","type","userLogin","userInfo","Error","config","headers","Authorization","concat","token","data","post","payload","error","errorMessage","response","message","getOrderDetails","id","get","editOrderDetails","transOrder"],"sources":["C:/Users/陈云林/Desktop/health/health-project/frontend/src/actions/orderAction.js"],"sourcesContent":["import {\r\n  ORDER_CREATE_FAIL,\r\n  ORDER_CREATE_REQUEST,\r\n  ORDER_CREATE_SUCCESS,\r\n  ORDER_DETAILS_FAIL,\r\n  ORDER_DETAILS_REQUEST,\r\n  ORDER_DETAILS_SUCCESS,\r\n  ORDER_TRANS_FAIL,\r\n  ORDER_TRANS_REQUEST,\r\n  ORDER_TRANS_SUCCESS,\r\n\r\n} from '../contents/orderContent'\r\nimport axios from 'axios'\r\n//创建订单  Action\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: ORDER_CREATE_REQUEST })\r\n\r\n    // 获取登录成功后的用户信息\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    // 在尝试使用userInfo之前，确保它不是null\r\n    if (!userInfo) {\r\n      throw new Error('用户未登录。')\r\n    }\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`, // 确保在发送请求前userInfo存在\r\n      },\r\n    }\r\n    const { data } = await axios.post(`/api/orders`, order, config)\r\n    dispatch({ type: ORDER_CREATE_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    const errorMessage =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n\r\n    dispatch({\r\n      type: ORDER_CREATE_FAIL,\r\n      payload: errorMessage,\r\n    })\r\n  }\r\n}\r\n\r\n//获取order   Action\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: ORDER_DETAILS_REQUEST })\r\n\r\n    //获取登录成功后的用户信息\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.get(`/api/orders/${id}`, config)\r\n    dispatch({ type: ORDER_DETAILS_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\n//修改的订单详情\r\nexport const editOrderDetails = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: ORDER_DETAILS_REQUEST })\r\n\r\n\r\n    // 获取登录成功后的用户信息\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    // 在尝试使用userInfo之前，确保它不是null\r\n    if (!userInfo) {\r\n      throw new Error('用户未登录。')\r\n    }\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`, // 确保在发送请求前userInfo存在\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.get(`/api/orders/${id}`, config)\r\n    dispatch({ type: ORDER_DETAILS_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\n\r\n//医生转诊 创建order\r\nexport const transOrder = (order) => async (dispatch, getState) => {\r\n  try {\r\n\r\n    dispatch({ type: ORDER_TRANS_REQUEST })\r\n\r\n    // 获取登录成功后的用户信息\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    // 在尝试使用userInfo之前，确保它不是null\r\n    if (!userInfo) {\r\n      throw new Error('用户未登录。')\r\n    }\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`, // 确保在发送请求前userInfo存在\r\n      },\r\n    }\r\n    dispatch({ type: ORDER_TRANS_REQUEST })\r\n\r\n    const { data } = await axios.post(`/api/orders/edit`, order, config)\r\n    dispatch({ type: ORDER_TRANS_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    const errorMessage =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n    dispatch({\r\n      type: ORDER_TRANS_FAIL,\r\n      payload: errorMessage,\r\n    })\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}