{"ast":null,"code":"import axios from 'axios';\nimport { CHECK_MEDICAL_FAIL, CHECK_MEDICAL_REQUEST, CHECK_MEDICAL_SUCCESS, EDIT_DETAIL_FAIL, EDIT_DETAIL_REQUEST, EDIT_DETAIL_SUCCESS, FETCH_ORDERS_FAIL, FETCH_ORDERS_REQUEST, FETCH_ORDERS_SUCCESS, STAFF_DETAILS_FAIL, STAFF_DETAILS_REQUEST, STAFF_DETAILS_SUCCESS, STAFF_LIST_FAIL, STAFF_LIST_REQUEST, STAFF_LIST_SUCCESS } from '../contents/staffContents';\n\n//获取所有医生的action\nexport const listStaffs = () => async dispatch => {\n  try {\n    dispatch({\n      type: STAFF_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/staffs');\n    dispatch({\n      type: STAFF_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: STAFF_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n//获取单个医生的action\nexport const listStaffDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: STAFF_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/staffs/${id}`);\n    dispatch({\n      type: STAFF_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: STAFF_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n//获取医生对应的order\nexport const fetchOrdersByStaffId = id => async (dispatch, getState) => {\n  dispatch({\n    type: FETCH_ORDERS_REQUEST\n  });\n  try {\n    // 获取登录成功后的用户信息\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}` // 使用用户的 token\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/staffs/orders/${id}`, config);\n    dispatch({\n      type: FETCH_ORDERS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: FETCH_ORDERS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n//获取医生对应的编辑order\nexport const editOrderById = id => async (dispatch, getState) => {\n  dispatch({\n    type: EDIT_DETAIL_REQUEST\n  });\n  try {\n    // 获取登录成功后的用户信息\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}` // 使用用户的 token\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/staffs/orders/${id}/edit`, config);\n    dispatch({\n      type: EDIT_DETAIL_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: EDIT_DETAIL_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n//修改患者的订单状态\n\nexport const updateOrderStatus = (orderId, itemIndex, status) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: 'ORDER_UPDATE_STATUS_REQUEST'\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/staffs/orders/${orderId}/edit`, {\n      itemIndex,\n      status\n    }, config);\n    dispatch({\n      type: 'ORDER_UPDATE_STATUS_SUCCESS',\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'ORDER_UPDATE_STATUS_FAIL',\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n//修改患者的医疗记录，写入诊断和处方\nexport const creatMedical = (userId, staffId, medicalPrescription, diagnosticResult, test, date) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CHECK_MEDICAL_REQUEST\n    });\n\n    //解构页面中的数据\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      editOrder: {\n        orderDetial\n      }\n    } = getState();\n    const orderId = orderDetial._id;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const body = {\n      userId,\n      staffId,\n      medicalPrescription,\n      diagnosticResult,\n      test,\n      date\n    };\n    const {\n      data\n    } = await axios.post(`/staffs/orders/${orderId}/check`, body, config);\n    dispatch({\n      type: CHECK_MEDICAL_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CHECK_MEDICAL_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","CHECK_MEDICAL_FAIL","CHECK_MEDICAL_REQUEST","CHECK_MEDICAL_SUCCESS","EDIT_DETAIL_FAIL","EDIT_DETAIL_REQUEST","EDIT_DETAIL_SUCCESS","FETCH_ORDERS_FAIL","FETCH_ORDERS_REQUEST","FETCH_ORDERS_SUCCESS","STAFF_DETAILS_FAIL","STAFF_DETAILS_REQUEST","STAFF_DETAILS_SUCCESS","STAFF_LIST_FAIL","STAFF_LIST_REQUEST","STAFF_LIST_SUCCESS","listStaffs","dispatch","type","data","get","payload","error","response","message","listStaffDetails","id","fetchOrdersByStaffId","getState","userLogin","userInfo","config","headers","Authorization","token","editOrderById","updateOrderStatus","orderId","itemIndex","status","put","creatMedical","userId","staffId","medicalPrescription","diagnosticResult","test","date","editOrder","orderDetial","_id","body","post"],"sources":["C:/Users/陈云林/Desktop/health/health-project/frontend/src/actions/staffAction.js"],"sourcesContent":["import axios from 'axios'\r\nimport {\r\n  CHECK_MEDICAL_FAIL,\r\n  CHECK_MEDICAL_REQUEST,\r\n  CHECK_MEDICAL_SUCCESS,\r\n  EDIT_DETAIL_FAIL,\r\n  EDIT_DETAIL_REQUEST,\r\n  EDIT_DETAIL_SUCCESS,\r\n  FETCH_ORDERS_FAIL,\r\n  FETCH_ORDERS_REQUEST,\r\n  FETCH_ORDERS_SUCCESS,\r\n  STAFF_DETAILS_FAIL,\r\n  STAFF_DETAILS_REQUEST,\r\n  STAFF_DETAILS_SUCCESS,\r\n  STAFF_LIST_FAIL,\r\n  STAFF_LIST_REQUEST,\r\n  STAFF_LIST_SUCCESS\r\n} from '../contents/staffContents'\r\n\r\n//获取所有医生的action\r\nexport const listStaffs = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: STAFF_LIST_REQUEST })\r\n    const { data } = await axios.get('/api/staffs')\r\n\r\n    dispatch({ type: STAFF_LIST_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: STAFF_LIST_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\n//获取单个医生的action\r\nexport const listStaffDetails = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: STAFF_DETAILS_REQUEST })\r\n    const { data } = await axios.get(`/api/staffs/${id}`)\r\n\r\n    dispatch({ type: STAFF_DETAILS_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: STAFF_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\n\r\n//获取医生对应的order\r\nexport const fetchOrdersByStaffId = (id) => async (dispatch, getState) => {\r\n  dispatch({ type: FETCH_ORDERS_REQUEST })\r\n  try {\r\n    // 获取登录成功后的用户信息\r\n    const { userLogin: { userInfo } } = getState()\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`, // 使用用户的 token\r\n      },\r\n    }\r\n    const { data } = await axios.get(`/api/staffs/orders/${id}`, config)\r\n\r\n    dispatch({ type: FETCH_ORDERS_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: FETCH_ORDERS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\n//获取医生对应的编辑order\r\nexport const editOrderById = (id) => async (dispatch, getState) => {\r\n  dispatch({ type: EDIT_DETAIL_REQUEST })\r\n  try {\r\n    // 获取登录成功后的用户信息\r\n    const { userLogin: { userInfo } } = getState()\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`, // 使用用户的 token\r\n      },\r\n    }\r\n    const { data } = await axios.get(`/api/staffs/orders/${id}/edit`, config)\r\n\r\n    dispatch({ type: EDIT_DETAIL_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: EDIT_DETAIL_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\n//修改患者的订单状态\r\n\r\nexport const updateOrderStatus = (orderId, itemIndex, status) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: 'ORDER_UPDATE_STATUS_REQUEST' })\r\n\r\n    const { userLogin: { userInfo } } = getState()\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.put(`/api/staffs/orders/${orderId}/edit`, { itemIndex, status }, config)\r\n\r\n    dispatch({\r\n      type: 'ORDER_UPDATE_STATUS_SUCCESS',\r\n      payload: data,\r\n    })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: 'ORDER_UPDATE_STATUS_FAIL',\r\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message,\r\n    })\r\n  }\r\n}\r\n\r\n\r\n//修改患者的医疗记录，写入诊断和处方\r\nexport const creatMedical = (\r\n  userId,\r\n  staffId,\r\n  medicalPrescription,\r\n  diagnosticResult,\r\n  test,\r\n  date,\r\n) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: CHECK_MEDICAL_REQUEST })\r\n\r\n    //解构页面中的数据\r\n    const { userLogin: { userInfo } } = getState()\r\n    const { editOrder: { orderDetial } } = getState()\r\n    const orderId = orderDetial._id\r\n\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`\r\n      },\r\n    }\r\n    const body = {\r\n      userId,\r\n      staffId,\r\n      medicalPrescription,\r\n      diagnosticResult,\r\n      test,\r\n      date,\r\n    }\r\n    const { data } = await axios.post(`/staffs/orders/${orderId}/check`, body, config)\r\n    dispatch({ type: CHECK_MEDICAL_SUCCESS, payload: data })\r\n\r\n  } catch (error) {\r\n    dispatch({\r\n      type: CHECK_MEDICAL_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}