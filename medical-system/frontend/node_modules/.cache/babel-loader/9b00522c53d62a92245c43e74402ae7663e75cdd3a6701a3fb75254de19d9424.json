{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u9648\\u4E91\\u6797\\\\Desktop\\\\mobile-shop\\\\frontend\\\\src\\\\components\\\\Product.js\";\nimport React from 'react';\nimport { Card } from 'react-bootstrap';\nimport Rating from './Rating';\nimport { Link } from 'react-router-dom';\n/** 用于展示不同产品的信息\r\n * 此时的Prodcut组件是 Homescreen的子组件\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Product = ({\n  product\n}) => {\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"my-3 p-3 rounded\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: `/products/${product._id}`,\n      children: /*#__PURE__*/_jsxDEV(Card.Img, {\n        src: product.image,\n        variant: \"top\",\n        style: {\n          height: '180px',\n          width: '100%',\n          // 确保图片宽度总是占满容器\n          objectFit: 'contain',\n          // 保证图片按比例缩放\n          objectPosition: 'center' // 居中图片，对于宽高比不是完美匹配的情况\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      className: \"d-flex flex-column\",\n      children: [\"  \", /*#__PURE__*/_jsxDEV(Link, {\n        to: `/products/${product._id}`,\n        style: {\n          textDecoration: 'none'\n        },\n        children: /*#__PURE__*/_jsxDEV(Card.Title, {\n          style: {\n            height: '4rem',\n            overflow: 'hidden'\n          },\n          children: product.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        as: \"div\",\n        className: \"flex-grow-1\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(Rating, {\n          value: product.rating,\n          text: `${product.numReviews}条评论`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        as: \"h3\",\n        className: \"mt-auto\",\n        children: [\"$\", product.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n_c = Product;\nexport default Product;\n\n// import React from 'react'\n// import { Card, CardDeck, Button } from 'react-bootstrap'\n// import Rating from './Rating'\n// import { Link } from 'react-router-dom'\n// /** 用于展示不同产品的信息\n//  * 此时的Prodcut组件是 Homescreen的子组件\n// */\n\n// const Product = ({ product }) => {\n//   return (\n//     <Card className='my-3 py-3 rounded'>\n//       {/* 展示图片 */}\n//       <Link to={`/products/${product._id}`}>\n//         <Card.Img src={product.image} variant='top'></Card.Img>\n//       </Link>\n\n//       <Card.Body>\n\n//         {/* 展示图片名 */}\n//         <Link to={`/products/${product._id}`} style={{ textDecoration: 'none' }}>\n//           <Card.Title>{product.name}</Card.Title>\n//         </Link>\n\n//         {/* 因为其他的地方也需要使用商品评价，所以封装为组件来使用 */}\n//         <Card.Text as='div'>\n//           {/* <div className='my-3'>\n//             {product.rating}是依据{product.numReviews}条评价来计算的\n//           </div> */}\n//           <Rating value={product.rating} text={`${product.numReviews}条评论`} />\n//         </Card.Text>\n\n//         {/* 展示商品价格 */}\n//         <Card.Text as='h3'>\n//           ${product.price}\n//         </Card.Text>\n\n//       </Card.Body>\n//     </Card>\n//   )\n// }\n\n// export default Product\nvar _c;\n$RefreshReg$(_c, \"Product\");","map":{"version":3,"names":["React","Card","Rating","Link","jsxDEV","_jsxDEV","Product","product","className","children","to","_id","Img","src","image","variant","style","height","width","objectFit","objectPosition","fileName","_jsxFileName","lineNumber","columnNumber","Body","textDecoration","Title","overflow","name","Text","as","value","rating","text","numReviews","price","_c","$RefreshReg$"],"sources":["C:/Users/陈云林/Desktop/mobile-shop/frontend/src/components/Product.js"],"sourcesContent":["import React from 'react'\r\nimport { Card } from 'react-bootstrap'\r\nimport Rating from './Rating'\r\nimport { Link } from 'react-router-dom'\r\n/** 用于展示不同产品的信息\r\n * 此时的Prodcut组件是 Homescreen的子组件\r\n*/\r\n\r\nconst Product = ({ product }) => {\r\n  return (\r\n    <Card className='my-3 p-3 rounded'>\r\n      <Link to={`/products/${product._id}`}>\r\n        {/* 设置图片为固定高度，object-fit 保持图片比例 */}\r\n        <Card.Img\r\n          src={product.image}\r\n          variant='top'\r\n          style={{\r\n            height: '180px',\r\n            width: '100%', // 确保图片宽度总是占满容器\r\n            objectFit: 'contain', // 保证图片按比例缩放\r\n            objectPosition: 'center' // 居中图片，对于宽高比不是完美匹配的情况\r\n          }}\r\n        />\r\n      </Link>\r\n\r\n      <Card.Body className=\"d-flex flex-column\">  {/* 使用flex-column使内容在垂直方向排列 */}\r\n\r\n        <Link to={`/products/${product._id}`} style={{ textDecoration: 'none' }}>\r\n          {/* 设置标题为固定高度 */}\r\n          <Card.Title style={{ height: '4rem', overflow: 'hidden' }}>\r\n            {product.name}\r\n          </Card.Title>\r\n        </Link>\r\n\r\n        <Card.Text as='div' className=\"flex-grow-1\"> {/* 使用flex-grow-1让评分部分填充可用空间 */}\r\n          <Rating value={product.rating} text={`${product.numReviews}条评论`} />\r\n        </Card.Text>\r\n\r\n        {/* 保持价格始终在底部 */}\r\n        <Card.Text as='h3' className=\"mt-auto\">\r\n          ${product.price}\r\n        </Card.Text>\r\n\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Product\r\n\r\n\r\n// import React from 'react'\r\n// import { Card, CardDeck, Button } from 'react-bootstrap'\r\n// import Rating from './Rating'\r\n// import { Link } from 'react-router-dom'\r\n// /** 用于展示不同产品的信息\r\n//  * 此时的Prodcut组件是 Homescreen的子组件\r\n// */\r\n\r\n// const Product = ({ product }) => {\r\n//   return (\r\n//     <Card className='my-3 py-3 rounded'>\r\n//       {/* 展示图片 */}\r\n//       <Link to={`/products/${product._id}`}>\r\n//         <Card.Img src={product.image} variant='top'></Card.Img>\r\n//       </Link>\r\n\r\n//       <Card.Body>\r\n\r\n//         {/* 展示图片名 */}\r\n//         <Link to={`/products/${product._id}`} style={{ textDecoration: 'none' }}>\r\n//           <Card.Title>{product.name}</Card.Title>\r\n//         </Link>\r\n\r\n//         {/* 因为其他的地方也需要使用商品评价，所以封装为组件来使用 */}\r\n//         <Card.Text as='div'>\r\n//           {/* <div className='my-3'>\r\n//             {product.rating}是依据{product.numReviews}条评价来计算的\r\n//           </div> */}\r\n//           <Rating value={product.rating} text={`${product.numReviews}条评论`} />\r\n//         </Card.Text>\r\n\r\n\r\n\r\n//         {/* 展示商品价格 */}\r\n//         <Card.Text as='h3'>\r\n//           ${product.price}\r\n//         </Card.Text>\r\n\r\n//       </Card.Body>\r\n//     </Card>\r\n//   )\r\n// }\r\n\r\n// export default Product\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}