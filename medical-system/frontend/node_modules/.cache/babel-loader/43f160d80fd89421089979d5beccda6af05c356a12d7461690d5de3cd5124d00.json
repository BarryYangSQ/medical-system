{"ast":null,"code":"import { ORDER_CREATE_FAIL, ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_DETAILS_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS } from '../contents/orderContent';\nimport axios from 'axios';\n//创建订单  Action\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n\n    // 获取登录成功后的用户信息\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n\n    // 在尝试使用userInfo之前，确保它不是null\n    if (!userInfo) {\n      throw new Error('用户未登录。');\n    }\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}` // 确保在发送请求前userInfo存在\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/orders`, order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const errorMessage = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: errorMessage\n    });\n  }\n};\n\n//获取order   Action\nexport const getOrderDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST\n    });\n\n    //获取登录成功后的用户信息\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/orders/${id}`, config);\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n//修改的订单详情\nexport const editOrderDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST\n    });\n\n    //获取登录成功后的用户信息\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/orders/${id}`, config);\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"names":["ORDER_CREATE_FAIL","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_DETAILS_FAIL","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","axios","createOrder","order","dispatch","getState","type","userLogin","userInfo","Error","config","headers","Authorization","token","data","post","payload","error","errorMessage","response","message","getOrderDetails","id","get","editOrderDetails"],"sources":["C:/Users/陈云林/Desktop/health/health-project/frontend/src/actions/orderAction.js"],"sourcesContent":["import {\r\n  ORDER_CREATE_FAIL,\r\n  ORDER_CREATE_REQUEST,\r\n  ORDER_CREATE_SUCCESS,\r\n  ORDER_DETAILS_FAIL,\r\n  ORDER_DETAILS_REQUEST,\r\n  ORDER_DETAILS_SUCCESS,\r\n\r\n} from '../contents/orderContent'\r\nimport axios from 'axios'\r\n//创建订单  Action\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: ORDER_CREATE_REQUEST })\r\n\r\n    // 获取登录成功后的用户信息\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    // 在尝试使用userInfo之前，确保它不是null\r\n    if (!userInfo) {\r\n      throw new Error('用户未登录。')\r\n    }\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`, // 确保在发送请求前userInfo存在\r\n      },\r\n    }\r\n    const { data } = await axios.post(`/api/orders`, order, config)\r\n    dispatch({ type: ORDER_CREATE_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    const errorMessage =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n\r\n    dispatch({\r\n      type: ORDER_CREATE_FAIL,\r\n      payload: errorMessage,\r\n    })\r\n  }\r\n}\r\n\r\n//获取order   Action\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: ORDER_DETAILS_REQUEST })\r\n\r\n    //获取登录成功后的用户信息\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.get(`/api/orders/${id}`, config)\r\n    dispatch({ type: ORDER_DETAILS_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\n//修改的订单详情\r\nexport const editOrderDetails = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: ORDER_DETAILS_REQUEST })\r\n\r\n    //获取登录成功后的用户信息\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.get(`/api/orders/${id}`, config)\r\n    dispatch({ type: ORDER_DETAILS_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}